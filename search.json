[{"title":"keepalived - VRRP 协议","path":"/2025/10/30/keepalived-00/","content":"虚拟路由冗余协议 VRRP (Virtual Router Redundancy Protocol) keepalived","tags":["高可用","keepalived"],"categories":["编程"]},{"title":"每天最重要的2小时 - 02","path":"/2025/10/29/two-awesome-hours-02/","content":"我们的大脑能量是驱动我们行为的燃油，如果没有了它，我们就寸步难行。 什么会让你心理疲惫“执行功能”指的是大脑所拥有的各种控制和决定方向的功能。大脑的执行功能包括做出决定、做计划，必要的时候，还要短暂地记住一些想法。 进行自我控制往往会削弱我们的自控力。当进行自控行为之后，我们的这部分大脑功能往往会显得疲惫。 即使是做一些典型的、日常的、不重要的决定，也会让人在接下来的自控性任务中缺乏动力。 情绪决定你的表现情绪能够帮助我们解决和应对眼前的情况。 愤怒或不快能够让我们积极应对某些特定的想法和行动。下一次，如果你明知冒这个险才是正确的，却又不敢冒险，不妨让自己愤怒起来。 当我们感到悲伤时，往往会在做决定时尽量少带成见。 焦虑是一种能让我们高度警觉、对任何突发状况做好准备的情绪。 如果想让自己在那些不太重要的事情上放开手，如果要发挥自己的创造力，如果需要做出迅速的决定，试试带着积极的情绪去面对。 如何管理心理能量首先要分辨出那些工作最容易极大地消耗你的心理能量。在进行需要自己百分百投入的工作之前，一定要尽可能地避免做那些消耗心理能量的事情。 如果你在做完某项任务之后觉得很累，很有可能就是它让你消耗大量的自控力。 试着做一做下面这四件事： 早上第一件事（真正的第一件事，在看任何社交媒体之前）就是完成你最重要的工作。想想你自己手头上最具创造性、最有意思的工作，或者长远来看最有益的工作是什么，然后在早晨花一两个小时去做。 考虑一下今天所有的待办事项，把他们分类为重要的、创造性的、其他。在一天中较晚的时候完成其他分类里的工作。 试试在下午花上一个小时阅读并回复你的电子邮件。 在第二天有重要活动时，头天晚上就提前做一些决定，比如穿什么，早餐午餐吃什么，也可以是重要的决定。 迅速补充心理能量的三种方法： 缓慢地深呼吸一会儿。 尽情地大笑一场，积极的情绪可以为我们“充电”。 短暂地打个盹儿。10分钟的短暂睡眠能够帮助缓解疲劳，还能够提升警觉度以及许多不同的认知功能。 有时候果断地放弃一些事，以保证自己在最重要的时刻拥有良好的状态，对我们而言或许更有帮助。 为了真正利用好你的心理能量，你需要做的是出色地完成事关紧要的工作，而不是平庸地完成所有的工作。 结论：让你的效率达到最大化下一次，如果你发现自己正处于抉择点，能够开始一项新任务时，请务必回顾一下：刚刚完成了那些任务？大脑是否已经因为做出了太多决定而疲惫不堪？目前的情绪如何？它们有没有影响到你的下一项任务？ 反思Dan Koe 的视频中确实也有提到愤怒的情绪的作用。 某天，我发现折腾博客的个性化配置会让我很累。 时间管理不是把日程塞满。 每天最重要的2小时","tags":["每天最重要的2小时"],"categories":["读书笔记"]},{"title":"keepalived - VRRP 同步","path":"/2025/10/28/keepalived-03/","content":"Keepalived 的 VRRP 同步功能（即同步组，sync groups）解决了复杂网络环境中的一个关键问题：在此类环境中，多个 VRRP 实例可能需要维持状态一致性。若缺乏同步机制，各个 VRRP 实例会各自进行独立的状态转换，这可能导致 “脑裂”（split-brain）场景或路由路径不一致的问题。 keepalived","tags":["高可用","keepalived"],"categories":["编程"]},{"title":"Source Insight 配置记录","path":"/2025/10/28/source-insight/","content":"快捷键 F5: 跳转到指定行 F8: 高亮选中 Ctrl + /: 全局搜索 Source Insight 的两种高亮方式1. 自动高亮（鼠标点击高亮） 打开选项设置：在菜单栏中选择 Options File Type Options…。 勾选高亮选项：在弹出的窗口中，找到并勾选 Highlight references to selected symbol 选项。 效果如图 2. 快捷键手动高亮 选中要高亮的部分，点击 F8 效果如图","tags":["SourceInsight"],"categories":["编程"]},{"title":"keepalived - VRRP 调度器","path":"/2025/10/28/keepalived-02/","content":"代码版本： https://github.com/acassen/keepalived/releases/tag/v1.1.12 通告处理VRRP 调度器处理传入的 VRRP 通告，并根据实例的当前状态对其进行处理： 代码流程vrrp_read_dispatcher_thread vrrp_dispatcher_read /* read affect received buffer */ read(fd, vrrp_buffer, VRRP_PACKET_TEMP_LEN); /* Searching for matching instance */ vrrp = vrrp_index_lookup(hd-vrid, fd); /* Run the FSM handler */ prev_state = vrrp-state; VRRP_FSM_READ(vrrp, vrrp_buffer, len); /* MASTER */ vrrp_leave_master vrrp_state_master_rx /* Process the incoming packet */ ret = vrrp_check_packet(vrrp, buf, buflen); if (Lower priority) vrrp_send_adv(vrrp, vrrp-priority); vrrp_send_gratuitous_arp(vrrp); return 0; else vrrp-ms_down_timer = 3 * vrrp-adver_int + VRRP_TIMER_SKEW(vrrp); vrrp-wantstate = VRRP_STATE_BACK; vrrp-state = VRRP_STATE_BACK; return 1; /* BACKUP */ vrrp_backup vrrp_state_backup if(Higher priority) vrrp-ms_down_timer = 3 * vrrp-adver_int + VRRP_TIMER_SKEW(vrrp); else vrrp-wantstate = VRRP_STATE_GOTO_MASTER; vrrp_send_adv(vrrp, vrrp-priority); keepalived","tags":["高可用","keepalived"],"categories":["编程"]},{"title":"Linux 进程间通信：共享内存","path":"/2025/10/27/ipc-shm/","content":"头文件 sys/shm.h shmget 创建共享内存 第一次创建完共享内存时，它还不能被任何进程访问 int shmget(key_t key, size_t size, int shmflg); shmat — at：attach 启动对该共享内存的访问，并把共享内存连接到当前进程的地址空间 void *shmat(int shm_id, const void *shm_addr, int shmflg); shmdt — dt：detach 将共享内存从当前进程中分离。注意，将共享内存分离并不是删除它，只是使该共享内存对当前进程不再可用 int shmdt(const void *shmaddr); shmctl — ctl：control 控制共享内存 int shmctl(int shm_id, int command, struct shmid_ds *buf);","tags":["进程间通信"],"categories":["编程"]},{"title":"keepalived - VRRP 状态机","path":"/2025/10/27/keepalived-01/","content":"代码版本： https://github.com/acassen/keepalived/releases/tag/v1.1.12 VRRP 状态机VRRP_FSM Read_to: read timeout struct void (*read) (vrrp_rt *, char *, int);\tvoid (*read_to) (vrrp_rt *); VRRP_FSM[VRRP_MAX_FSM_STATE + 1] =/* Stream Read Handlers | Stream Read_to handlers * *------------------------------+------------------------------*/\tNULL, NULL,\tvrrp_backup, vrrp_goto_master,\t/* BACKUP */\tvrrp_leave_master, vrrp_master, /* MASTER */\tvrrp_leave_fault, vrrp_fault, /* FAULT */\tvrrp_become_master, vrrp_goto_master\t/* GOTO_MASTER */; VRRP FSM Macro/* VRRP FSM Macro */#define VRRP_FSM_READ_TO(V) \\do \\ if ((*(VRRP_FSM[(V)-state].read_to)))\t\\ (*(VRRP_FSM[(V)-state].read_to)) (V);\t\\ while (0)#define VRRP_FSM_READ(V, B, L) \\do \\ if ((*(VRRP_FSM[(V)-state].read))) \\ (*(VRRP_FSM[(V)-state].read)) (V, B, L);\t\\ while (0) VRRP_TSM当某个 VRRP 实例发生状态变更，且需要与其同步组（sync group）内的其他实例进行协调时，将使用 VRRP_TSM 。 使用方式可以理解为：VRRP_TSM[from_state][to_state] struct void (*handler) (vrrp_rt *); VRRP_TSM[VRRP_MAX_TSM_STATE + 1][VRRP_MAX_TSM_STATE + 1] =/* From: To: BACKUP MASTER FAULT *//* v */ NULL, NULL, NULL, NULL ,/* BACKUP */ NULL, vrrp_sync_master_election, vrrp_sync_master, vrrp_sync_fault ,/* MASTER */ NULL, vrrp_sync_backup, vrrp_sync_master, vrrp_sync_fault ,/* FAULT */ NULL, vrrp_sync_backup, vrrp_sync_master, vrrp_sync_fault ; VRRP TSM Macro#define VRRP_TSM_HANDLE(S,V) \\do \\ if ((V)-sync \\ S != VRRP_STATE_GOTO_MASTER) \\ if ((*(VRRP_TSM[S][(V)-state].handler)))\t\\ (*(VRRP_TSM[S][(V)-state].handler)) (V);\t\\ while (0) 状态图 初始化期间，从 INIT（初始化）状态开始 若所有检查均通过，则转换至 BACKUP（备份）状态 若未从优先级更高的主用（MASTER）设备接收到通告消息，则转换至 MASTER（主用）状态 若接收到优先级更高的通告消息，则转换至 BACKUP（备份）状态 若任何被跟踪的资源发生故障，则转换至 FAULT（故障）状态 当故障条件清除后，返回至 BACKUP（备份）状态 INIT 状态/* Initialize state handling */static voidvrrp_init_state(list l) for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) vrrp = ELEMENT_DATA(e); if (vrrp-priority == VRRP_PRIO_OWNER || vrrp-wantstate == VRRP_STATE_MAST) vrrp-state = VRRP_STATE_GOTO_MASTER; else vrrp-ms_down_timer = 3 * vrrp-adver_int + VRRP_TIMER_SKEW(vrrp); vrrp-state = VRRP_STATE_BACK; BACKUP 状态 当处于 BACKUP（备份）状态时，该实例会设置一个 master_down_timer（主用设备下线计时器）。 每当从优先级更高的主用（MASTER）设备接收到有效的通告消息（advertisement）时，此计时器就会重置。 若计时器超时（即在超时周期内未接收到任何通告消息），该实例将转换至 MASTER（主用）状态。 /* Handle dispatcher read timeout */static intvrrp_dispatcher_read_to(int fd) /* Run the FSM handler */ prev_state = vrrp-state; VRRP_FSM_READ_TO(vrrp); // vrrp_goto_master /* handle instance synchronization */ VRRP_TSM_HANDLE(prev_state, vrrp); MASTER 状态 拥有并维护虚拟 IP 地址（VIPs）。 按照配置的时间间隔发送定期的 VRRP 通告消息。 处理接收的 VRRP 通告消息，若接收到优先级更高的通告消息，该实例将转换至 BACKUP 状态。 static voidvrrp_master(vrrp_rt * vrrp) if (vrrp-state == VRRP_STATE_MAST) vrrp_state_master_tx(vrrp, 0); FAULT 状态由于出现错误条件，该 VRRP 实例无法以 MASTER（主用）或 BACKUP（备份）状态正常运行。 keepalived","tags":["高可用","keepalived"],"categories":["编程"]},{"title":"每天最重要的2小时 - 01","path":"/2025/10/21/two-awesome-hours-01/","content":"意识到每天的关键时刻–抉择点我们一旦开始了一项神经性常规活动，就会像电脑程序一样一直运行下去，直到完成任务，或是被打断。 实际上，每一天都是由一系列习惯性的神经常规程序组成：早上起床、穿好衣服去上班、打开电脑、回复电子邮件等。问题在于，我们经常会从一个任务跳到另一个任务，却不仔细想想下一步最好该做什么。 学会意识到一天的当中的几个特殊时刻，在这种时刻，你有机会也有能力决定自己将如何度过接下来的时间。 做出最恰当的选择当常规程序结束的时候，自我意识就会浮现出来。意识最重要的功能就是在我们的自动式神经常规活动遇到困难的时候做出决定。 抉择点通常是作为冲突–无意识的自动行为之间的冲突、行为和目标之间相冲突–的结果而出现的。正因为这些抉择点会令人不舒服，我们往往才选择尽快跳过它们。 忽略抉择点的坏处匆忙跳过抉择点，很可能接下来进行的任务并没有那么重要，或是不适合在这段时间完成，损失也许会更大。 充分利于抉择点的三个诀窍在这一刻，对我们而言究竟什么最为重要。 珍惜每一个抉择点 意识到抉择点的出现，并尽力抓住它；要承认它的存在，而不是无视它，一头扎进无意识思维指引你去做的下一个任务里。 抉择点能够让你与眼下最关注的事保持一定的“距离”。 提前为抉择点做好相应计划 “计划不去做某件事”常常会失败，关键的一点是，你做的计划要让自己在这一刻进行一项新的活动–一项你乐意做的事。 当我们在脑海中设想某一个行动时，所利用的神经回路其实和真正去做这件事时的神经回路相同。 不要随便开始一项新任务，除非已经有意识地决定了它确实值得做。 一旦你完成一项任务，不要去想接下来自己可以是轻松地做些什么，而是把这一刻标记为抉择点。 怎么决定什么事最值得花时间？判断依据之一就是自己当天最重要的任务。 结论：聪明地安排你的时间用途在完成不同任务的间隙之间，我们终于从忘我工作的状态中脱身而出，这些时刻实在是不可多得的礼物，而我们完全应该审慎地利用这些时刻。 反思 早上睡醒之后，会无意识的在社交软件，购物软件之间来回跳转。（睡前将手机放在客厅。） 下班前会突然冒出不想运动的想法。（想象下班后运动的过程。） 每天最重要的2小时","tags":["每天最重要的2小时"],"categories":["读书笔记"]},{"title":"孕期检查备忘录","path":"/2025/10/20/pregnancy-checklist/","content":"名词解释13+6医生关于孕期的常用描述，13 是指第13周，+6 则指的是第6天，比如 NT 检查需要在 11 到 13+6 这段时间进行，意思就是需要在第11周到第13周的第6天之间的这段时间进行。 重要时间节点NT 检查 时间：孕11周到孕13+6周 通过B超检查胎儿颈项透明层的厚度。 建档（母子健康手册） 时间：孕12周 一本粉红色的小册子，需要保留到孩子上学。 建档需要进行抽血检查，所以当天早上记得不要吃早饭。建档之后，需要按照时间要求，定期到医院进行孕期检查。 准生证（生育登记证明） 时间：怀孕3个月后 准生证应该是计划生育时期的叫法，现在应该都是通过各地的相关公众号进行的。 唐氏筛查 时间：孕15周到孕20周（以医生建议为准） 用于评估胎儿患有唐氏综合征的风险。","categories":["生活记录"]},{"title":"顺风车车主初体验","path":"/2025/10/19/hitch/","content":"更新记录：2025-10-28：偶然看到保险会以非运营车辆进行营运拒赔的说法，所以最终还是把所有平台注册的顺风车给注销了，避免不必要的麻烦吧。 在国庆节的末尾进行了爱车的第4次保养，我已有两年的驾龄，由于最近经常需要在周末开车往返于两地，所以下定决心跑一下顺风车平摊路费。 在没有注册成为顺风车车主之前的想法是顺路了就接一单，实在没有就算了，也不指望创收；但在成为车主之后，我的行为竟然瞬间出现了变化，我发现自己早早的发布了几天之后的出行信息，开始频繁的查看三个平台寻找合适的乘客，在乘客莫名其妙的取消订单之后觉得失落，在没有订单的情况下觉得要不再等等看有没有合适的。 在体验了一次顺风车车主的行程之后，我发现与我希望的方式（不接不送，顺路上下）不同，无论是高德、哈啰，还是滴滴，都需要车主按照乘客指定的起点和目的地进行接送。 因此我决定记录并提醒一下自己跑顺风车的最初想法和要求： 不需要跑顺风车创收，有合适的就跑，没有也无所谓 三环以内的订单不接（感受过市区下班高峰期之后的第一个决定） 距离我的起点和终点超过10公里的订单不接 每周五查看平台信息即可 接单后，及时与乘客电话沟通确认 除了上述提到的三个平台之外，在我的城市还有一个公众号平台，早期我也确实作为乘客体验过三四次，这个公众号上车主发布自己的具体行程，乘客依据自己的出行需求选择合适的订单，并主动与车主电话沟通。 哦，对了，那顺便说一下三个平台的逻辑， 高德：车主端可以看到乘客发布的行程；乘客也可以看到车主发布的行程；双方可以根据行程信息相互进行邀请 哈啰：暂时没有体验到 滴滴：乘客发布自己的行程，但看不到车主发布的行程，只能被动等待；需要车主依据自己的行程选择合适的订单 对比下来，我更喜欢高德的顺风车方式，不过感觉好像滴滴上的订单更多。","tags":["顺风车"],"categories":["生活记录"]},{"title":"结构体的内存对齐和变长数组","path":"/2025/10/15/c99-vla/","content":"引入项目中业务模块产生的日志在通过本地 socket 发送给日志模块后，日志模块记录的内容总是会丢失前6个字节。经过排查，业务模块和日志模块使用的虽然都是 log_msg_t 结构体，但结构体中的变量类型定义却略有差异，如下所示： 业务模块的结构体定义 typedef struct\tunsigned char type;\tunsigned char level;\tunsigned short size;\tunsigned int pid;\tunsigned int cds;\tunsigned char imm;\tunsigned char u8wf;\tunsigned char data[]; log_msg_t; 日志模块的结构体定义 typedef struct\tunsigned char type;\tunsigned char level;\tunsigned short size;\tunsigned int pid;\tunsigned int cds;\tunsigned char imm;\tunsigned int u8wf;\tunsigned char data[]; log_msg_t; 显然，由于结构体中 u8wf 变量类型的不同，导致出现了内容丢失。但 unsigned char 的大小为1个字节，unsigned int 的大小为4个字节，怎么会出现丢失6个字节的内容呢，这与结构体的内存对齐有关。 内存对齐为什么需要对齐在 C 语言中，结构体的内存对齐是编译器为了提高 CPU 访问内存效率而采取的一种内存布局优化策略，是一种拿空间换时间的做法。 CPU 访问内存时并非逐个字节读取，而是按固定大小的 “块”（如 4 字节、8 字节）读取。如果数据的起始地址是块大小的整数倍（即 “对齐”），CPU 可以一次完成读取；否则可能需要多次读取，影响效率。 内存对齐规则 第一个成员在与结构体变量偏移量为 0 的地址处。 其他成员变量的起始地址必须是 min(该成员自身大小, 编译器默认对齐数) 的整数倍。 结构体的总大小必须是所有成员中最大对齐值的整数倍，即 min(结构体中最宽成员类型的大小, 编译器默认对齐数) 的整数倍。若不足，编译器会在最后一个成员之后添加填充字节以满足此要求。 练习下面两个结构体的大小分别为多少？ typedef struct\tchar c1;\tint i;\tchar c2; S1;typedef struct\tchar c1;\tchar c2;\tint i; S2; S1 和 S2 的内存布局如下图所示: 相关函数sizeof 获取结构体的大小 printf(%ld , sizeof(S1));printf(%ld , sizeof(S2)); offset 宏 计算结构体中某变量相对于首地址的偏移 头文件: #includestddef.h printf(offsetof(S1, c1) = %ld , offsetof(S1, c1));printf(offsetof(S1, i) = %ld , offsetof(S1, i));printf(offsetof(S1, c2) = %ld , offsetof(S1, c2)); #pragma pack() 修改默认对齐数（谨慎操作） // 将默认对齐数修改为 8#pragma pack(8)typedef struct\tchar c1;\tint i;\tchar c2; S1;// 恢复默认对齐数#pragma pack() TIPS在设计结构体的时候要满足对齐规则，又要节省空间，如何做到呢？ 在定义结构体时，将大小相同或相近的成员声明在一起，并且按照从大到小（或从小到大）的顺序声明，可以最大限度地减少填充字节，节省内存。 可变长数组此外，可以看到 log_msg_t 的最后一个元素为 data[], 且如果使用 sizeof(log_msg_t)，可能会发现结果并不符合预期，这一切都与可变长数组的特点相关。 介绍变长数组是在 C 语言的 C99 标准中引入的新特性。结构体中的最后一个元素允许是大小未知的数组。 比如： struct S int n; int arr[]; // 部分编译器可能会报错，可以将 arr[] 改为 arr[0]; 特点 结构体中的可变长数组前面必须至少有一个其它类型的成员。 可变长数组必须是结构体的最后一个成员。 可变长数组不占用结构体的存储空间，使用 sizeof 计算结构体的大小不包含可变长数组成员。 结构体变量相邻的存储空间保存的是可变长数组的内容。 log_msg_t因此，两个模块使用的log_msg_t结构体的内存布局如图所示: 可以看到两个结构体的 data 成员相对于起始地址的偏移量相差 6 个字节，这也就是为什么日志模块记录的内容总是会丢失前6个字节。 优势使用指针struct S int n; int *arr;; 那么在使用时就需要两次 malloc 和两次 free， struct S *ps = NULL;// 动态分配结构体S的内存空间ps = (struct S*)malloc(sizeof(struct S));if (ps == NULL) return -1;ps-n = 10;// 为结构体中的数组成员分配内存ps-arr = (int*)malloc(ps-n * sizeof(int));if (ps-arr == NULL) free(ps);\tps = NULL;\treturn -1;// do something // 释放所有动态分配的内存free(ps-arr);ps-arr = NULL;free(ps);ps = NULL; 使用可变长数组struct S int n; int arr[0];; 使用时只需要一次 malloc 和 free， // 分配内存以容纳结构体S和10个整数的数组struct S *ps = (struct S *)malloc(sizeof(struct S) + sizeof(int) * 10);if (ps == NULL) return -1;ps-n = 10;// do something // 释放分配的内存并置空指针free(ps);ps = NULL; 总结使用指针： 为了防止内存泄漏，如果分两次分配结构体和缓冲区的内存，当第二次 malloc 失败时，必须回滚释放第一次分配的结构体内存。 进行了两次 malloc，需要对应两次 free，如果我们的代码是在一个给别人用的函数中，我们在函数里做了两次内存分配，并把整个结构体返回给用户；虽然用户调用 free 可以释放结构体，但用户并不知道结构体的成员也需要 free，造成内存泄露。 malloc 次数越多，产生的内存碎片就越多，内存的利用率就会降低。 使用变长数组： 连续内存有利于提高访问速度，同时减少内存碎片","tags":["C语言"],"categories":["编程"]},{"title":"我的影视资源解决方案","path":"/2025/10/15/emby/","content":"影视资源站最初主要在一些影视资源站看视频，比如在在线之家看完了全季的《权力的游戏》。 以下是几个仍保留在收藏夹中的资源站： 低端影视 在线之家 NO视频 网盘网盘在很长时间里都是我获取影视资源的主要阵地，从百度网盘、谷歌云盘、阿里云盘，到现在主要使用的夸克网盘。在阿里云盘开始收费后，我发现88VIP会赠送1年的夸克网盘会员（此时，我已持有88VIP将近半年的时间）。 夸克网盘会员(88VIP版)有6TB的存储空间，且在电视上有对应的客户端，几乎满足了我所有的观看需求，但影视墙功能仍需付费开通SVIP才能使用。不过，最近在折腾飞牛OS里提供的飞牛影视可以挂载夸克网盘，并且能够进行直链播放，也是一种免费使用影视墙的解决方案。 PS: 88VIP还提供1年的优酷会员或芒果会员，应该已经能够满足大部分的观影需求。 以下是几个我目前常用的网盘资源搜索网站： 云盘盘 SeedHub 夸克盘 EmbyEmby 在我看来是强者的存在，几乎可以替代爱优腾和各种流媒体平台。互联网上有大量的公益服和付费服，我记得最早使用的是叫做普拉斯影业的公益服，不过目前好像已经不能使用了。 以下是一个关于 Emby 的介绍视频，部分信息已过期，不过有助于你简单了解 Emby。"},{"title":"家庭网络折腾备忘录","path":"/2025/10/14/cucc-modem/","content":"002a748617e5cc304f438c1409bd96526eb4ad4593d4d71e04e8698e3520de0cf8e5545d3a653be200d7127a72677075b27591933b5624dc42316f783c49f5b39cbe5476d1a3a35076c86152eb558d28c39678e517a24164134ed90692d8bcc00395ead76bb9bf955b19704afa3fb2075cb8988f8d95f0d888ee1b9577408744a705fd6d0008bb468613f9e3165557b4881365223a42ae4d5cda13bc70d5f635bc2932f657c2a25e8aac2cf984edcdbd4f56c4da662c37bea241d1efb52c41221c8e663eac64dc536ef2ed9c1315f235e1631b7eb9ad79cf3f1eb466e1d4ea8dd90ccf78a7ff9632a3b584aede277aeec0cf8c338b321fbeaeb833eb5cd5ff1bf6572b52d008132cb3b4a66efdd439eb75e56f271a6d2ff57e84ab760f4d279279cd828a918447fbfceaafbdb556a2513d4629afbba1ffd5b520a690fff390570a8febcf3bdf62b223a4f032ac02c0d731011c6c1bf4cd79f1596d484a6e477183ef99d4f92e03028d4cc176033163aa1f1c5bb1922adcaeaaf03538658f4c223c21e0f7f985e9032730a942ff60c5619f4f344dac000b70427f472ed7b2225d4195a28db1ad60db56a6dcc178a3325542a44e652800c9212138c3c29916fc9ce344bb42d2e54c6f91a678bd9fd8844ab925b7210a19b05d6fd1d7a3f282927cb658efa98d9547e0ebc4a5da9de7ccf847aeca4c67a77e23bb5855dd8d3391a457c7d1918d32545e6a9ef5ea30c2b9758fbd83455d0ef7a69f489d8b95c29122a21bd94b572a99e28766ea16801946cc Hey, password is required here.","tags":["光猫","路由器"],"categories":["网络"]},{"title":"Hello Stellar","path":"/2025/09/30/hello-stellar/","content":"安装主题在根目录执行如下命令： npm i hexo-theme-stellar 主导航栏根目录下的 _config.stellar.yml # 侧边栏主功能导航菜单menubar: columns: 4 # 一行多少个 items: # 可按照自己需求增加，符合以下格式即可 # - id: post # 页面中高亮的 menu_id # theme: #1BCDFC # 高亮时的颜色，仅 svg 中 fill=currentColor 时有效 # icon: solar:documents-bold-duotone # 支持 svg/img 标签，可以定义在 icons.yml 文件中，也支持外部图片的 URL # title: 博客 # 标题 # url: / # 跳转链接，支持相对路径和绝对路径 # - id: wiki # theme: #3DC550 # icon: solar:notebook-bookmark-bold-duotone # title: 文档 # url: /wiki/ # - id: explore # theme: #FA6400 # icon: solar:planet-bold-duotone # title: 探索 # url: /explore/ # - id: social # theme: #F44336 # icon: solar:chat-square-like-bold-duotone # title: 社交 # url: /friends/ 文章模版根目录下 scaffolds 文件夹中编辑 post.md ---# 基本信息title: title date: date tags: []categories: []description: # excerpt 也可 # 封面cover: banner: poster: # 海报（可选，全图封面卡片） topic: 标题上方的小字 # 可选 headline: 大标题 # 必选 caption: 标题下方的小字 # 可选 color: 标题颜色 # 可选# 插件sticky: # 数字越大越靠前mermaid:katex: mathjax: # 可选topic: # 专栏 idauthor: references:comments: # 设置 false 禁止评论indexing: # 设置 false 避免被搜索breadcrumb: # 设置 false 隐藏面包屑导航leftbar: rightbar:h1: # 设置为 隐藏标题type: # tech/story--- 文档系统（wiki）source 目录结构如下： .+ ├── _data+ │ ├── wiki+ │ │ └── hexo-cpp.yml+ │ └── wiki.yml ├── _posts │ ├── hello-hexo.md │ ├── hello-stellar.md │ └── hello-world.md ├── about │ └── index.md+ └── wiki+ └── cpp+ ├── backup.md+ └── index.md hexo-cpp.yml name: C++title: 学习指南subtitle: 从入门到再次入门tags: 博客主题icon: https://res.xaox.cc/gh/cdn-x/wiki@main/stellar/icon.svgcover: https://res.xaox.cc/gh/cdn-x/wiki@main/stellar/icon.svgdescription: 这是一份从入门到再次入门的学习指南。search: filter: /wiki/cpp/ placeholder: 在 Stellar 中搜索...leftbar: - tree - timeline_cpp_releases - relatedbase_dir: /wiki/cpp/tree: 快速开始: - index 网站备份: - backup wiki.yml - hexo-cpp index.md ---wiki: hexo-cpp # 这是项目id，对应 /data/wiki/hexo-cpp.ymltitle: c++--- sites 网站卡片 source 目录的文件结构如下： . ├── _data+ │ ├── links+ │ | └── tool-life.yml tool-life.yml 的内容如下: - title: 中国科学技术大学测速网站 url: https://test.ustc.edu.cn/ cover: icon: description: 非 WIFI 环境下慎点 在需要的位置添加如下内容： % sites tool-life % timeline 时间线静态时间线 在需要的位置添加如下内容: % timeline %!-- node 2021 年 2 月 16 日 --主要部分功能已经开发的差不多了。% image https://res.xaox.cc/gh/cdn-x/wiki@main/stellar/photos/hello@1x.png width:300px ratio:1179/390 %!-- node 2021 年 2 月 11 日 --今天除夕，也是生日，一个人在外地过年+过生日，熬夜开发新主题，尽量在假期结束前放出公测版。% endtimeline % 侧边栏组件 参考链接：https://xaoxuu.com/wiki/stellar/widgets/ 在 source/_data 目录下新建 widgets.yml 文件 about_sidebar: layout: linklist columns: 1 items: - icon: svg.../svg # 或者 icons.yml 中设置的 icon 名称 title: 关于 url: /about/ - icon: svg.../svg # 或者 icons.yml 中设置的 icon 名称 title: 说说 url: /memos/ 在使用的地方，如 about/index.md中添加如下内容： ---leftbar: [about_sidebar]--- hexo","tags":["hexo"],"categories":["博客"]},{"title":"Hello Hexo","path":"/2025/09/30/hello-hexo/","content":"本文描述的过程主要为如何在本地部署Hexo。在了解和熟悉本地部署的流程之后，更推荐利用 GitHub Actions 实现自动化部署 Hexo 到 Github Pages。 前置条件安装下列软件： Node.js Git 安装安装 hexo: npm install -g hexo-cli 查看版本： hexo v 创建创建 blog 文件夹mkdir blogcd bloghexo init 部署 hexohexo g 本地化预览hexo s 写作创建草稿hexo new draft hello-hexo # hello-hexo 为文件名 发布hexo publish hello-hexo # hello-hexo 为文件名 图片全局资源文件夹如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。 然后通过类似于 ![](/images/image.jpg) 的方法访问它们。 文章资源文件夹将 config.yml 文件中的 post_asset_folder 选项设为 true post_asset_folder: true 在通过 hexo new [layout] title 命令创建新文章时，会自动创建一个与文章同名的文件夹。将所有与该文章有关的资源放在这个关联文件夹中之后，可以通过相对路径来引用它们。 相对路径引用的标签插件当打开文章资源文件夹功能后，把一个 example.jpg 图片放在资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](example.jpg) ，它将不会出现在首页上。 正确的引用图片方式是使用下列的标签插件 ： % asset_img example.jpg This is an example image %% asset_img spaced asset.jpg spaced title % GitHub Actionsname: Deploy Hexo to GitHub Pageson: push: branches: - main # 或你使用的默认分支名称jobs: deploy: runs-on: ubuntu-22.04 steps: - name: Checkout blog source uses: actions/checkout@v4 with: path: blog - name: Set up Node.js uses: actions/setup-node@v4 with: node-version: 22 # 设置 Node.js 版本 - name: Cache dependencies uses: actions/cache@v4 with: path: node_modules key: $ runner.os -node-$ hashFiles(**/package-lock.json) restore-keys: | $ runner.os -node- - name: Install dependencies run: npm install working-directory: ./blog - name: Install Hexo CLI run: npm install -g hexo-cli working-directory: ./blog - name: Install Hexo Theme run: npm install hexo-theme-stellar working-directory: ./blog - name: Generate static pages run: hexo generate working-directory: ./blog - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v4 with: personal_token: $ secrets.PERSONAL_TOKEN publish_dir: ./blog/public external_repository: username/username.github.io # 更改为你的 GitHub Pages 仓库, username 是你的用户名 publish_branch: main # GitHub Pages 分支 hexo","tags":["hexo"],"categories":["博客"]},{"title":"Hello World","path":"/2025/09/30/hello-world/","content":"10d79030e8222445804370796b90fca1cf7dd2ee01010d95413afa643c36d75c6da7dc8584583c53132d123565a83bc482d57efe09dbb13f6be1ebadf67b396c5e9af14ae37a94b87d779719bc8c1cd1a95420a6d53586101970b6bd1e11383c5fb9eb6a2afd2dfd764940c736e232c31819ba63da4a7c6eb6c1003cc6443dcf2082b9f749ca03a1484b87b08c908b3c310d7b631064a7fc3f9ca36177e4c3059978875c3caa78a7dceb6037a9522caf5c4adf858dd97440561f76a5ba5e4fd77e9898dfeb4cad54c4bb643f9c0ecbaef49a3431bdd2455830a88255232397afbbe9b23eb9395dfae6f0824e03416bc0b3804386abdc6c923976a913424fdbf1ba89bde972822239ac5e9109f398b65ae65ef00629508a203d30649f6408e1f61f5f6e73d99349907d745bd4c4ef0763621826913a2677273e3b66ae19439d1940d9ebcc45d324738506f0ac5dca5093adf45b82a24da2d49432e9f7cea3b56d73ea8b80628014008c75e6df0aa070ccdaa53907f1adc5e6234b2ab2f7f8485fb9383dc64927d631e20713c7d719815e20c9d6247aa120998e681a19e43d40ca49e20ce7419d535072ff85e74c96caabe848f11f049126a6f4cbbfc746a3cae3d4b6c98db711e8b3bdbd372def67e3d1bf776ee35037a2377d5898704789976ec22fc47c64eb83da5766f0408afee5b438701c6084a1025c673100e7ac0cf710407782790b56679a3fbb40313022e90f715c1a39914fe4b710beb621310bee163ece727a9d02da8b2ef0925acbeedbed1bdf2fb2a5a106956f607dcb5fcef0e36a97afa6fe5d415be51d647cc196fec6186575845eba2577edf79b237f40501d9e0516fe26fcc18e5bb029218ceea51ed6571ed6499c1b863fe5e4184373aee7af54e687aecc3ffa4986afe90e3a5fd67d73f47c0c882443054fed1625259e96370f07d55431f1a03130d5486c9ac1bc2c51d48a7b31ca8c81fdd6cc8795e3296ee5cc4dd66f3e582583d5516a299f41c5bc32710ee392ddb18d02b9fea50df38fbea6579d1f8a7a1ec2fdcff1a546b8a51d96657a2c6538c2dc93476d69467cb3671b880c09d3c422cfb3bb9199050f0c77a137b4b0dbdb4041a1be97361f0b783b6ab8bbbdcfdf1c9d545e17a129eca1e4cc3aabe88b7ab633ec35eacbb26e1b4b8c0876bd6ed5f351cc4d04c974e55a4f37f0580b599953ae28a9a6f6ea344c8bee255996315fa0673b087d06f292b6f9e84801a38c8ffea05fecb03b16577db7697bbac072e1d372bf5fb0dfd48bdb369ba8ac97c5f3f8b3173cbee017a98e2eea5f78edd3ad8ae87ff061a3e43ccbb435291c501139a80744cf59040e4b980306c75cfb527b82fe4c578a8973a6a75baeb2be249b344f14cd6153f99e07309fee10b0e8e4702ded0dbde9bcc5b0eb0d117b479db98f93d36f1c8721a712a9650023572dd95effb7718f45c2948d9192a1d27b38e652903d68992618f4c9feee5c5dfc2fcb15fbf1d3fd5896245a14bc1bdabb6dddb4db0ea3fc36165bbc4b56ffbbb0ed570e77f7d8820a5078d5fe499945473ff216f85fe92c706d7aa308198dfcd4d85abe4f1fcb8924d6b5c72b05a03333c163fedfef1f479daeff26a1d99802645980fefa0f8be445851c3f508e0b5ee79b06b504a054b4e7ad26f9d0344d2395322d452565b03020d13fe150bbc9ca3e433e04e3411da56239b42807d0090d11b5858ff8487212fb6771f4914fdcd8393d2cd2150eb82d8e82be0db2e71679f2f78d5b22b32a305993748f09821838303b75df669acf24e08c3eab2fe0433662a1056cc392ccecc20041dbf44a229ada35bed43255979bfd7e150b6e812c6c23466dd45e57c5b443d976b298b5f5e4d977130bcaf5ec26e2e2c727886f3f116fd1fbad331bbf9d1ca9efa141a0174450b00f818e2b59a784a40b77918ba82e75a31bd542e611a43010f08fc30369e93386f239e5fb9a515d6c2afc272997890c0ec4619f78f4b5fed881f0002b85e8165088649391e0249613310e523cdf5e2dfd5d4b4236bf38c02fb72341cfe539508f7af5c7db00d07b8425db13d92aa628930b5521eba6daf54fce1a8a6a36e1b095f67ebadd2fb0c096012eee795a471f33f501a0fef0a9075dfce83a3227087b12382ff22011db6d7fc3cc877c19d425b5b672b574f4df7643bee516ecdc66629c21963733bea688bc205c9add0c36479130ca3eee5dc72698d00713bf52775cba1634cf4cdb9d5856c60135524af408c949847e6cce9729997a3858154a3cf638ec1f1d326b3caa59b6a3555f947a761998b37a3890339d86cf8eaaf75260de0475d5ba017d78d7e2671849c4f8924658a4fa3a6bb478e5dde99ccb965fc5f099418feda6e45cb85e810e253d8da0ec932b4f426793cb86b882291a6d98f048b162b71dd6888262a0e3d96caa0538f96845e3bddee62faf30f9b8e3176953e68652ed0b429f284bbd828de3d2c4815b2b69cd2f5cd993b1bcf65d2c8b67f3a5cc99dab9d029d01f9730eccf97c48dcfefbd9c3589bee7e98ebc76468ce1e4d47c4a4c89e275bb743892c4b8558d8ea957afa93b5ce2bd02f94ee38eb9fdcddcb8231584cc840b914a3eefe46c659029555aa0c43e523b507722c6753aa625f67b07ade89ad34eabd449f4c1d2822e0a0f435ce2602c2f5427dabec0f8cee68c5d64d9685cfc8e367505320dff6026c07f62ddb32c3039fe867067bcac7347b455893575e795974c91cd2b13bfe2341efd7b5e24b81aac898e60bb569def27c91bd3554bcf25d039002a7541daf01684f1aa4e4eb493a7ef9d3ab8c8489f98da8bf72989e524f97268729a6f437727d3354db4d2e5890f9b70fe2daa36cfbba178ccb0ead684e862eacb694e5c22f388c7d8b1f360f0459117529cf67e806255f61f71f840674c20c1b6c9b0ba4072bb7b1e19abec986c902fa25e735c93371dfb51ec15e9a2440cf886f29bc4e911d7c8925922efbc893b336161da60f33600143637d99e132a76da2087f75934b4997351f5e29ce8da8b847b61959afe5e9c612a2cc64730cf8dcb02cd15002ed3ec0088023a12023dcab79efe9d7f1f1d222b1193c79f0bab1a8e6a2dff9665327e827e675d76d3555cdc880e Hey, password is required here."},{"title":"关于","path":"/about/index.html","content":"2025 年 9 月 30 日Dan Koe：如何真正掌握一项技能别再埋头苦读了。真正的学习始于创造。先勾勒一个你想做的东西——可以是一个小项目，一件作品，任何具体的事物。然后开始动手。很快你会撞墙。这是好事。这堵墙告诉你：你真正需要学什么。如此往复，直到项目完成。这才是真正的掌握之道。大多数人的问题在于，他们在教程的迷宫里转了好几年，却两手空空——因为他们一直在为「某一天」做准备，而那一天从未到来。"},{"title":"探索","path":"/explore/index.html","content":"工具纸由我 PaperMe在线自定义打印纸生成器PDF24PDF工具中国科学技术大学测速网站非 WIFI 环境下慎点 公开信息查询中国裁判文书网https://wenshu.court.gov.cn/专利查询世界知识产权组织的免费专利数据库 自用闪卡导入 CSV 创建卡片引导"},{"title":"说说","path":"/memos/index.html","content":"2025 年 10 月 30 日如何做一个有质量的技术分享：问题 - 方案 - 总结2025 年 10 月 29 日昨晚无意间刷到一个外卖员练习英语的视频，想到自己也可以下载一个多邻国试试。"},{"title":"code","path":"/wiki/cpp/index.html","content":"工具DeepWikihttps://deepwiki.com/TemplateRepoCxxVS Code C++项目模板PlantUMLhttps://plantuml.com/zh/ C++恋恋风辰的官方博客https://llfc.club/homeCppGuide社区https://cppguide.cn/c++自救指南https://www.blogchn.com/pages/3001d9/c++全栈知识体系https://stibel.icu/ linux开发内功修炼https://kfngxl.cn/熊喵君的博客https://pandaychen.github.io/文先生的博客https://wenfh2020.com/ other技术文章摘抄https://learn.lianglianglee.com/深入高可用系统原理与设计https://github.com/isno/theByteBook"},{"title":"interview","path":"/wiki/cpp/interview.html","content":"CVLapisCVhttps://github.com/BingyanStudio/LapisCV 八股阿秀的学习笔记https://interviewguide.cn/小林codinghttps://xiaolincoding.com/卡码笔记https://notes.kamacoder.com/ 刷题代码随想录https://github.com/youngyangyang04/leetcode-master"},{"title":"编译与运行","path":"/wiki/cpp/tws-build.html","content":"开发环境 WSL2 + Ubuntu-24.04 mysql-8.0.43 MySQL 安装与配置 mysql-server 安装 sudo apt-get updatesudo apt-get install mysql-server# 查看 mysql 的版本mysql --version 客户端库开发包安装，提供头文件和链接库 sudo apt-get install libmysqlclient-dev 数据库建立登录 MySQL 服务# 远程mysql -h localhost -P 3306 -u root -p# 本机mysql -u root -p 可能会遇到如下报错信息： ERROR 1698 (28000): Access denied for user root@localhost 这是因为MySQL默认使用了 UNIX auth_socket 插件进行认证。解决方案可参考：stackoverflow。 这里使用回答中推荐的第2种方案，即创建一个与系统用户一致的新的数据库用户： 注意：tws 可修改为自定义用户名 $ sudo mysql -u rootmysql USE mysql;mysql CREATE USER tws@localhost IDENTIFIED BY ;mysql GRANT ALL PRIVILEGES ON *.* TO tws@localhost;mysql FLUSH PRIVILEGES;mysql exit;$ sudo service mysql restart 之后登录 MySQL 服务就可以使用如下命令： $ mysql -u tws -p# 默认没有密码，回车即可登录 建立数据库$ mysql -u tws -p# 建立 twsdb 库mysql create database twsdb;# 创建 user 表mysql USE twsdb;mysql CREATE TABLE user( username char(50) NULL, passwd char(50) NULL)ENGINE=InnoDB;# 添加数据mysql INSERT INTO user(username, passwd) VALUES(admin, 123456); 编译代码修改 修改 main.cpp 中的如下内容: //需要修改的数据库信息,登录名,密码,库名string user = tws;string passwd = ;string databasename = twsdb; build$ chmod +x build.sh$ ./build.sh 运行run./server 服务访问 访问地址: http://127.0.0.1:9006/ 用户名: admin 密码：123456 其它MySQL 常用命令# 启动、关闭、重启 MySQL服务sudo service mysql startsudo service mysql stopsudo service mysql restart# 查看MySQL服务状态sudo service mysql status MySQL 用户认证方式查询$ sudo mysql -u rootmysql USE mysql;mysql SELECT User, Host, plugin FROM mysql.user;+------------------+-----------+-----------------------+| User | Host | plugin |+------------------+-----------+-----------------------+| debian-sys-maint | localhost | caching_sha2_password || mysql.infoschema | localhost | caching_sha2_password || mysql.session | localhost | caching_sha2_password || mysql.sys | localhost | caching_sha2_password || root | localhost | auth_socket || tws | localhost | auth_socket |+------------------+-----------+-----------------------+6 rows in set (0.00 sec) MySQL 删除用户mysql DROP USER tws@localhost;"},{"title":"功能梳理","path":"/wiki/cpp/tws-run.html","content":"00dd9c2c5c86dd0e1f8ce0e685de9f4ff0bd2a56b95edad86511c5d02f488f316760d7dce49fb836b51504758de8a211bcd2581eb7031339f7b407da5ff4892311b90f8085c0eb62976161580f45d9decaffdd630d0b7e470339139dd2bf6d39da932996dacfd2d0ac9ee14301c9aa0b551c4d96c7623025beaec65e203deb4cf73224719b44c3e4ea14b6bccb8ff50ffb7941f8393e53bdcbfdf526a403f8e5f8995133dfd83d3d6cb0b8a541804bceaa7f4c67d5db1dcb6f6a953b2c1ccaa42314d19667556223745996bc816d7e5698a572ded5593ef5e60eaebe1c202dafb1e6c7f41fac7c9fee6b8d711e30338dda764fc1239c4778854a251070b4834ca10cad61ae4a7d9976f56d0562a9548686a618c58319b5720b6004e6ce86de71e959ed53745df52a383d410ac18730d8b8ad1cec042e1e11b012cf8c631485a9dc49c6993bb17245ac555775f488fa21 Hey, password is required here."},{"title":"压测","path":"/wiki/cpp/tws-webbench.html","content":"保证 server 运行./server 压测$ cd test_pressure/webbench-1.5./webbench -c 500 -t 5 http://127.0.0.1:9006/Webbench - Simple Web Benchmark 1.5Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.Benchmarking: GET http://127.0.0.1:9006/1000 clients, running 5 sec.Speed=220188 pages/min, 411152 bytes/sec.Requests: 18349 susceed, 0 failed. QPS 是什么： QPS（Queries Per Second，每秒查询率）是衡量系统吞吐量的核心指标，代表服务器每秒能处理的有效请求数量。 QPS 如何计算： QPS = 总有效请求数 ÷ 总耗时（秒） 因此，上述压测的 QPS 18349 5 3669. webbench 原理 父进程 fork 若干个子进程，每个子进程在用户要求时间或默认的时间内，对目标 web 循环发出实际访问请求 父子进程通过管道进行通信，子进程通过管道写端向父进程传递在若干次请求访问完毕后记录到的总信息，父进程通过管道读端读取子进程发来的相关信息 子进程在时间到后结束；父进程在所有子进程退出后，统计并给用户显示最后的测试结果，然后退出"},{"title":"介绍","path":"/wiki/cpp/tws.html","content":"项目地址： https://github.com/qinguoyi/TinyWebServer 参考资料： https://deepwiki.com/qinguoyi/TinyWebServer 小白视角：一文读懂社长的TinyWebServer(Raw_Version) ZWiley的随记: WebServer项目"},{"title":"WSL 开发环境配置","path":"/wiki/cpp/wsl-dev.html","content":"可根据需要选择安装 sudo apt install git cmake gdb build-essential clang clang-tidy \\ clang-format pkg-config tcpdump tshark"},{"title":"WSL 安装","path":"/wiki/cpp/wsl-install.html","content":"1. 以管理员身份打开 Windows PowerShell 启用 WSL 功能 dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 启用虚拟机功能 dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 2. 重启计算机3. 下载并安装 WSL 2 的 Linux 内核更新包 打开 PowerShell，运行以下命令 wsl --update 4. 设置 WSL 2 为默认版本 打开 PowerShell，运行以下命令 wsl --set-default-version 2 5. 通过 Microsoft Store 安装 Ubuntu 或其他 Linux 发行版 开始使用 WSL"},{"title":"光猫","path":"/wiki/wlan/cmcc.html","content":"如何获取联通光猫管理员密码 在地址栏 192.168.1.1 后面加上 /backupsettings.conf 把这个文件用记事本打开，找到 Adminpassword 一行后面的就是了"},{"title":"介绍","path":"/wiki/wlan/index.html","content":"131fd7c5506bb654a6cea69bbe40f3df7da318ecb0403b621d8f115b1f8d302bf6a9a4d5270b84db0e87e59dfe247981efcd8281284099f469b4b4e8f634e868e4671607d4a31592aeff9d649d1e0407bd7e1bc1cbf54d87af3576a02bf8498f2fdbb69f3bef66d718f02ef934c3851bd23c8b140d894efd71c93d3642f3d411603562ce7eae6717ce330a06cf6eef7c9fa36333050b55caf8efd91b39b2131d1ca0948aed75e43787b7163c54d62c027a420ed131665238b87de39ae2d8e7ea6de41a1dce92224b92bf589d1873a158e5371aa4880c0094095609838fe2e76e080c6da16ab74a1c3fb0a14928da5d400cae7a12bcbac5d2c250f791b0d46a905a1381a271cb7eadb98ee1a4ba97835872b4e4626f7f80e727fb3d49ac05760febd85438206bdaa6a09be2f192edce456b782bf63d57da24f8155c5a791e52bd98185580ce691b8734808d92a88dbe0fbd732db0e73c764cae2beb80797ca8b8549a8c76a648b2b16c6aa5137e5ffedbff4ee147d5370a5810ccadb61942ad69cdb241911353fd464bdeda402d9e2404ea735852a7ab9e75f56ba829952669402b15f9ec52fd0bdf7d7f3d42d9bb0534a4f92300fa7ee6df8ec6d9ce9824609e3ff230f3c258ff46f17db7c311c9c10da218083eb5c2e403ca9f838a3f6f12f33df838fe76844e1779e468c512c7ce776b1aa612d330eb79054415608982b02000de020ab1ea2c02648772eb593f4624491a5b891cd162e4d443b97876b9546a7d021109b2f3cfcdd5630fd22a942f99cbd3157ab67a087702322dbead0a1a138b435b2f9d042589146bc194902d9c3537ae34d1e31833f91942f651422588db2159b26ab4d559d936f5f1721af6734d4af09768a65b16c6dbde939c2ad0a1e11c468544ca73bf243cecefb148dbe95b67b1468d80cb31b761291734bc708a3ac7ae9753f5a43d91766afbb254e7a389db40c0a71d272b1471ecf95ab18a890f2ca583102cd106b2a05b54a35b70e1934423975409558894b6a5ddf15164d9ad5c2d67134f1020617df33294d76d15bac449b71ed633afbf4f593655f4df7c913309c76c2cad2aee207071e1f0aecb1cbdb712ff5e87049ffbe1027f1af47000a65a71ab1522e2b93164e02d7a774d54294b9d018945bb633bf0114e375758dd0ec034faa896a8b3a715dbec5c5c8168daff0fefc37a516803e2c1354d26123d0fcb94d23a4cb2dd459d1532d89216f9fe744434257971cd4be4dc3013e22b0cafee42b89aa3a52af0c8518701048962258e1375d2e40e07c75b3d7a21f2c51bee8749659ebdc0b694c5fccd75cf860964b83be091c5e020e6a2ce3f5605890c84a5d717d22ce483b18fe614cc2933b455d495c62843ef750b96c066456d8dcd421a90ee61e3994d32df1c8cd2774877dea24302089cf59f1e0987f4c7e76d116e0b5897c6086c71bbc87020f5c7efeec606db70012ac0b2362d8c32223eb8257e03abe7948e9e5ef3cb1969ba05dcd5d20af794bee131bfd0a41228fe3e6e5559d3b6e82a5d9a220910f7a8cab8089739e36933e285fa9c11c288a19a2dae2b8e51e9416c273d23d8761e2a8c9b21d945db73b8b7d483056f8ffe19cfb02becb4ed3d02da0edf91f74aed61fedb53c884924d501e17f0850b314ac207a148de8786d9909e069ecf0ef493af008ad9f44bf52356e838d561e3f6800a55484ac8d75ea84320f27d05e85a31c910f46e78e2f8ff099dbc93fb11808bc40b60e5cce87f1c51d9c404f79b33df7ddc4102a5b2365ba7b63f7a8d7f906b1a3040baddb5e858d3a9516737a32fedb89a38a7f55c9aebf6b1d975f063f4f9a0abf6014bd7741ed25df7724b6c8443c0d8f078b9959f94679c597cb1f32b1f26d7b8a1b728d614b89fabec5d47d400e2c098bb4904449e69261a62660d365ff35e49c7051a9cd85dc4022ad9eb44a3a795a2d007462b1d0f4e022691bd962106536039145c7d8826acfd432d057e99269f31ae805103d24c25cb6e244b151d070ecb5bcc75130ef7513bcb1d3eccfdcfc7720641120dbb3d2d9e30bb3cd2cc34e1d69dd0e5197c02774eb887dce80799de00465f0c230b9901908f20d399adc2ef6387f72d55a2f26f3f17add585d64da9967ce58a2ee6b8f6c39e7737686e7de74c4747daea0576d18d34feb2b423700764ec2dc56a8b1d3dc26dbd10ca477257077bedbd5f4c01a507c1ce7fa3c08efbfec1a7dd56794cfbad6457dcc7e3507238920beb3856e6916f2a52f525b0a277cfcbb24dc77827c35be75bbd87e6047d563d6eac2f271b6329783a024d1a7efd49580ff58df3531df32b6e66d4caa20bbba3fdd489f9df7b8ad76df863e510e293b0b92dfdfd637eb82b287114935630f018d11dedd806d0d3a88cfbbf112cfe4f64fe58d02fd38a14893bcbf57c57648c67d21167c1f5cfefaedf6e19a059340b53e966cd58fdf1ebd06d05998fa64f05d3410de89f4d6a137cded66dbc5cbb176958a7005141efa5ba41194a6ff74244d12e6c1d6f07008c08bb44f04db7cabc9ad811758f40a319205a90eba1f9991f0a12d5e1c37fdfc3a7742a97fa2266c1e5c569c451c05b3fed136e0fdbbfeea9bcb5e7a7aefdea7abe179f6f0069646f9893e7bd1f814a1d01f185a58257171fdd44 Hey, password is required here."},{"title":"路由器","path":"/wiki/wlan/router.html","content":"123"},{"title":"WSL 常用命令","path":"/wiki/cpp/wsl-cmd.html","content":"列出所有已安装的WSL发行版wsl --list --verbose 卸载某个WSL发行版wsl --unregister Ubuntu-18.04"}]